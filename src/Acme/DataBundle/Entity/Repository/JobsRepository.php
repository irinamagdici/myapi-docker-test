<?php

namespace Acme\DataBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * JobsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobsRepository extends EntityRepository {

  public function getJobsCount($storeId = '', $position = '', $location = '') {

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('count(storesHasJobs.id)');
    $qb->from('AcmeDataBundle:StoresHasJobs', 'storesHasJobs');
    $qb->leftJoin('AcmeDataBundle:Jobs', 'jobs', 'WITH', 'jobs.id = storesHasJobs.jobs');
    $qb->leftJoin('AcmeDataBundle:Stores', 'stores', 'WITH', 'stores.id = storesHasJobs.stores');
    if($storeId) {
      $qb->andWhere('storesHasJobs.stores = :storeId');
      $qb->setParameter('storeId', $storeId);
    }
    if($position) {
      $qb->andWhere('jobs.name = :position');
      $qb->setParameter('position', $position);
    }
    if($location) {
      $qb->andWhere('stores.locationCity LIKE :location OR stores.locationState LIKE :location OR stores.locationPostalCode LIKE :location');
      $qb->setParameter('location', '%' . $location . '%');
    }

    return $qb->getQuery()->getSingleScalarResult();
  }

	public function getJobs($storeId = '', $position = '', $location = '', $page, $noRecords, $sortField, $sortType) {

		$qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('storesHasJobs.id AS id, jobs.code AS code, jobs.name AS position, jobs.slug AS slug, jobs.jobType AS jobType, jobs.careerLevel AS careerLevel, jobs.education AS education, jobs.category AS category, jobs.requirements AS requirements, jobs.description AS description, jobs.quote AS quote, jobs.authorQuote AS authorQuote, jobs.datePosted AS datePosted, stores.storeId AS storeId, stores.locationCity AS locationCity, stores.locationState AS locationState, stores.locationPostalCode AS locationPostalCode');
    $qb->from('AcmeDataBundle:StoresHasJobs', 'storesHasJobs');
    $qb->leftJoin('AcmeDataBundle:Jobs', 'jobs', 'WITH', 'jobs.id = storesHasJobs.jobs');
    $qb->leftJoin('AcmeDataBundle:Stores', 'stores', 'WITH', 'stores.id = storesHasJobs.stores');
    if($storeId) {
      $qb->andWhere('storesHasJobs.stores = :storeId');
      $qb->setParameter('storeId', $storeId);
    }
    if($position) {
      $qb->andWhere('jobs.name = :position');
      $qb->setParameter('position', $position);
    }
    if($location) {
      $qb->andWhere('stores.locationCity LIKE :location OR stores.locationState LIKE :location OR stores.locationPostalCode LIKE :location');
      $qb->setParameter('location', '%' . $location . '%');
    }
    $qb->orderBy($sortField, $sortType);
    $qb->setMaxResults($noRecords);
    $qb->setFirstResult($page * $noRecords);

    return $qb->getQuery()->getArrayResult();

	}

  public function getJob($id) {

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('storesHasJobs.id AS id, jobs.code AS code, jobs.name AS position, jobs.slug AS slug, jobs.jobType AS jobType, jobs.careerLevel AS careerLevel, jobs.education AS education, jobs.category AS category, jobs.requirements AS requirements, jobs.description AS description, jobs.quote AS quote, jobs.authorQuote AS authorQuote, jobs.datePosted AS datePosted, stores.storeId AS storeId, stores.locationCity AS locationCity, stores.locationState AS locationState, stores.locationPostalCode AS locationPostalCode');
    $qb->from('AcmeDataBundle:StoresHasJobs', 'storesHasJobs');
    $qb->leftJoin('AcmeDataBundle:Jobs', 'jobs', 'WITH', 'jobs.id = storesHasJobs.jobs');
    $qb->leftJoin('AcmeDataBundle:Stores', 'stores', 'WITH', 'stores.id = storesHasJobs.stores');
    $qb->where('storesHasJobs.id = :id');
    $qb->setParameter('id', $id);

    return $qb->getQuery()->getArrayResult();
  }

  public function getJobSlug($slug) {

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('storesHasJobs.id AS id, jobs.code AS code, jobs.name AS position, jobs.slug AS slug, jobs.jobType AS jobType, jobs.careerLevel AS careerLevel, jobs.education AS education, jobs.category AS category, jobs.requirements AS requirements, jobs.description AS description, jobs.quote AS quote, jobs.authorQuote AS authorQuote, jobs.datePosted AS datePosted, stores.storeId AS storeId, stores.locationCity AS locationCity, stores.locationState AS locationState, stores.locationPostalCode AS locationPostalCode');
    $qb->from('AcmeDataBundle:StoresHasJobs', 'storesHasJobs');
    $qb->leftJoin('AcmeDataBundle:Jobs', 'jobs', 'WITH', 'jobs.id = storesHasJobs.jobs');
    $qb->leftJoin('AcmeDataBundle:Stores', 'stores', 'WITH', 'stores.id = storesHasJobs.stores');
    $qb->where('jobs.slug = :slug');
    $qb->setParameter('slug', $slug);

    return $qb->getQuery()->getArrayResult();
  }

}
