<?php

namespace Acme\DataBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Acme\DataBundle\Model\Constants\CouponsCategory;

/**
 * CouponsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CouponsRepository extends EntityRepository {

  public function getCoupons($storeId = '', $metroId = '', $optin) {

    $qb = $this->getEntityManager()->createQueryBuilder();
    if($storeId) {
      $qb->select('coupons.title AS title, coupons.image AS image, coupons.barcode AS barcode, coupons.category AS type, storesHasCoupons.orderIdx AS position');
      $qb->from('AcmeDataBundle:StoresHasCoupons', 'storesHasCoupons');
      $qb->leftJoin('AcmeDataBundle:Coupons', 'coupons', 'WITH', 'coupons.id = storesHasCoupons.coupons');
    }
    if($metroId) {
      $qb->select('coupons.title AS title, coupons.image AS image, coupons.barcode AS barcode, coupons.category AS type, dmaHasCoupons.orderIdx AS position');
      $qb->from('AcmeDataBundle:DmaHasCoupons', 'dmaHasCoupons');
      $qb->leftJoin('AcmeDataBundle:Coupons', 'coupons', 'WITH', 'coupons.id = dmaHasCoupons.coupons');
    }
    $qb->where('coupons.status = 1');
    if($storeId) {
      $qb->andWhere('storesHasCoupons.stores = :storeId');
      $qb->setParameter('storeId', $storeId);
      if($optin) {
        $qb->andWhere('coupons.category = :category1 OR coupons.category = :category2');
        $qb->setParameter('category1', CouponsCategory::STORE);
        $qb->setParameter('category2', CouponsCategory::PROMO);
      }
      else {
        $qb->andWhere('coupons.category = :category');
        $qb->setParameter('category', CouponsCategory::PROMO);
      }
      $qb->groupBy('storesHasCoupons.coupons');
      $qb->orderBy('coupons.category', 'DESC'); //ATTENTION, category is ENUM so sort will follow index for categories defined in DB, I was lazy to change order in DB, so I used DESC, with DESC - PROMO is first and STORE is second
      $qb->addOrderBy('storesHasCoupons.orderIdx', 'ASC');
    }
    if($metroId) {
      $qb->andWhere('dmaHasCoupons.dma = :metroId');
      $qb->andWhere('coupons.category = :category');
      $qb->setParameter('metroId', $metroId);
      $qb->setParameter('category', CouponsCategory::METRO);
      $qb->groupBy('dmaHasCoupons.coupons');
      $qb->orderBy('dmaHasCoupons.orderIdx', 'ASC');
    }

    return $qb->getQuery()->getArrayResult();
  }

  public function getCMSCouponsCount($keyword = '') {

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('count(coupons.id)');
    $qb->from('AcmeDataBundle:Coupons', 'coupons');
    if($keyword) {
      $qb->where('coupons.title LIKE :keyword OR coupons.image LIKE :keyword');
      $qb->setParameter('keyword', '%' . $keyword . '%');
    }

    return $qb->getQuery()->getSingleScalarResult();
  }

  public function getCMSCoupons($page, $noRecords, $sortField, $sortType, $keyword = '') {

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('coupons.id AS id, coupons.title AS title, coupons.category AS type, coupons.status AS status, coupons.endDate AS endDate, coupons.image AS image, coupons.barcode AS barcode, coupons.isDefault AS isDefault, coupons.isLocked AS isLocked, coupons.orderIdx AS position, count(storesHasCoupons.stores) AS noStores');
    $qb->from('AcmeDataBundle:Coupons', 'coupons');
    if($keyword) {
      $qb->where('coupons.title LIKE :keyword OR coupons.image LIKE :keyword');
      $qb->setParameter('keyword', '%' . $keyword . '%');
    }
    $qb->leftJoin('AcmeDataBundle:StoresHasCoupons', 'storesHasCoupons', 'WITH', 'storesHasCoupons.coupons = coupons.id');
    $qb->groupBy('id');
    if($sortField == 'position') {
      $qb->orderBy('isDefault', 'DESC');
      $qb->addOrderBy($sortField, $sortType);
    }
    else
      $qb->orderBy($sortField, $sortType);
    $qb->setMaxResults($noRecords);
    $qb->setFirstResult($page * $noRecords);

    return $qb->getQuery()->getArrayResult();
  }

  public function getCMSExportCoupons($sortField, $sortType) {

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('coupons.id AS id, coupons.title AS title, coupons.category AS type, coupons.status AS status, coupons.endDate AS endDate, coupons.image AS image, coupons.barcode AS barcode, coupons.barcodeMail AS barcodeMail, coupons.barcodeEmail AS barcodeEmail, coupons.isDefault AS isDefault, coupons.isDefault AS isLocked, coupons.orderIdx AS position, count(storesHasCoupons.stores) AS noStores');
    $qb->from('AcmeDataBundle:Coupons', 'coupons');
    $qb->leftJoin('AcmeDataBundle:StoresHasCoupons', 'storesHasCoupons', 'WITH', 'storesHasCoupons.coupons = coupons.id');
    $qb->groupBy('id');
    $qb->orderBy($sortField, $sortType);

    return $qb->getQuery()->getArrayResult();
  }

  public function getCMSMaxPosition() {

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('max(coupons.orderIdx)');
    $qb->from('AcmeDataBundle:Coupons', 'coupons');
    $qb->where('coupons.category = :category');
    $qb->setParameter('category', CouponsCategory::STORE);
    $qb->andWhere('coupons.isDefault = 1');

    return $qb->getQuery()->getSingleScalarResult();
  }

  public function getCMSStoreHasCouponMaxPosition($storeId) {

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('max(storesHasCoupons.orderIdx)');
    $qb->from('AcmeDataBundle:StoresHasCoupons', 'storesHasCoupons');
    $qb->where('storesHasCoupons.stores = :storeId');
    $qb->setParameter('storeId', $storeId);

    return $qb->getQuery()->getSingleScalarResult();
  }

  public function getCMSAllCoupons($isDefault = false, $keyword = '', $active = false) {

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('coupons.id AS id, coupons.title AS title, coupons.category AS type, coupons.status AS status, coupons.endDate AS endDate, coupons.image AS image, coupons.barcode AS barcode, coupons.isDefault AS isDefault, coupons.isLocked AS isLocked, coupons.orderIdx AS position');
    $qb->from('AcmeDataBundle:Coupons', 'coupons');
    $qb->where('coupons.category = :category1 OR coupons.category = :category2');
    $qb->setParameter('category1', CouponsCategory::STORE);
    $qb->setParameter('category2', CouponsCategory::PROMO);
    if($active) {
      $qb->andWhere('coupons.status = 1');
    }
    if($isDefault) {
      $qb->andWhere('coupons.isDefault = 1');
    }
    if($keyword) {
      $qb->andWhere('coupons.title LIKE :keyword');
      $qb->setParameter('keyword', '%' . $keyword . '%');
    }
    $qb->orderBy('coupons.orderIdx');

    return $qb->getQuery()->getArrayResult();
  }

  public function getCMSMyCoupons($storeId, $category) {

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('coupons.id AS id, coupons.title AS title, coupons.image AS image, coupons.isLocked as isLocked, coupons.endDate AS endDate, storesHasCoupons.orderIdx AS position');
    $qb->from('AcmeDataBundle:StoresHasCoupons', 'storesHasCoupons');
    $qb->leftJoin('AcmeDataBundle:Coupons', 'coupons', 'WITH', 'coupons.id = storesHasCoupons.coupons');
    $qb->where('coupons.status = 1');
    $qb->andWhere('coupons.category = :category');
    $qb->setParameter('category', $category);
    $qb->andWhere('storesHasCoupons.stores = :storeId');
    $qb->setParameter('storeId', $storeId);
    $qb->orderBy('storesHasCoupons.orderIdx', 'ASC');

    return $qb->getQuery()->getArrayResult();
  }

  public function getCMSAllStoresHasCoupons($couponId, $category) {

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('coupons.id AS id, coupons.title AS title, coupons.image AS image, coupons.endDate AS endDate');
    $qb->from('AcmeDataBundle:StoresHasCoupons', 'storesHasCoupons');
    $qb->leftJoin('AcmeDataBundle:Coupons', 'coupons', 'WITH', 'coupons.id = storesHasCoupons.coupons');
    $qb->where('coupons.category = :category');
    $qb->setParameter('category', $category);
    $qb->andWhere('storesHasCoupons.coupons = :couponId');
    $qb->setParameter('couponId', $couponId);
    $qb->orderBy('storesHasCoupons.orderIdx', 'ASC');

    return $qb->getQuery()->getArrayResult();
  }

  public function getCMSAfterDefaultCoupons($category, $orderIdx) {

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('coupons');
    $qb->from('AcmeDataBundle:Coupons', 'coupons');
    $qb->where('coupons.category = :category');
    $qb->setParameter('category', $category);
    $qb->andWhere('coupons.isDefault = 1');
    $qb->andWhere('coupons.orderIdx > :orderIdx');
    $qb->setParameter('orderIdx', $orderIdx);
    $qb->orderBy('coupons.orderIdx', 'ASC');

    return $qb->getQuery()->getResult();
  }

  public function getPromoExpiredCoupons() {

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('coupons');
    $qb->from('AcmeDataBundle:Coupons', 'coupons');
    $qb->where('coupons.category = :category');
    $qb->setParameter('category', CouponsCategory::PROMO);
    $qb->andWhere('coupons.endDate < :endDate');
    $qb->setParameter('endDate', date('Y-m-d'));
    $qb->andWhere('coupons.status = 1');
    $qb->orderBy('coupons.id', 'ASC');

    return $qb->getQuery()->getArrayResult();
  }

}
