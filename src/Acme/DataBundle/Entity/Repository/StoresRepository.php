<?php

namespace Acme\DataBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Acme\DataBundle\Model\Constants\UtilsConstants;
use Acme\DataBundle\Model\Constants\StoresStatus;

/**
 * StoresRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StoresRepository extends EntityRepository {

  public function getStoresCount($status, $state = '', $isFeatured = '', $isPipeline = '') {

    if($isFeatured == 0 || $isFeatured == 1)
      $featured = $isFeatured;
    else
      $featured = '';

    if($isPipeline == 0 || $isPipeline == 1)
      $pipeline = $isPipeline;
    else
      $pipeline = '';

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('count(stores.id)');
    $qb->from('AcmeDataBundle:Stores', 'stores');
    if(!strlen($pipeline)) {
      $qb->where('stores.locationStatus != :status');
      $qb->setParameter('status', $status);
    }
    $qb->andWhere('stores.lat != \'\'');
    $qb->andWhere('stores.lng != \'\'');
    if(strlen($featured)) {
      $qb->andWhere('stores.locationStatus = :open');
      $qb->setParameter('open', StoresStatus::OPEN);
      $qb->andWhere('stores.openDate >= :customDate');
      $qb->setParameter('customDate', date('Y-m-d', strtotime('-' . UtilsConstants::DAYS . ' days')));
      /*$qb->andWhere('stores.isFeatured = :featured');
      $qb->setParameter('featured', $featured);*/
    }
    if(strlen($pipeline)) {
      $qb->andWhere('stores.locationStatus = :pipeline');
      $qb->setParameter('pipeline', StoresStatus::PIPELINE);
      $qb->andWhere('stores.streetAddress1 != \'\'');
    }
    if(strlen($state)) {
      $qb->andWhere('stores.locationState = :state');
      $qb->setParameter('state', $state);
    }

    return $qb->getQuery()->getSingleScalarResult();
  }

	public function getStores($page, $noRecords, $sortField, $sortType, $status, $state = '', $isFeatured = '', $isPipeline = '') {

    if($isFeatured == 0 || $isFeatured == 1)
      $featured = $isFeatured;
    else
      $featured = '';

    if($isPipeline == 0 || $isPipeline == 1)
      $pipeline = $isPipeline;
    else
      $pipeline = '';

    $qb = $this->getEntityManager()->createQueryBuilder();
  	$qb->select('stores.id AS id, stores.storeId AS storeId, stores.streetAddress1 AS streetAddress1, stores.streetAddress2 AS streetAddress2, stores.locationCity AS locationCity, stores.locationState AS locationState, stores.locationPostalCode AS locationPostalCode, stores.phone AS phone, stores.rawPhone AS rawPhone, stores.semCamPhone AS semCamPhone, stores.rawSemCamPhone AS rawSemCamPhone, stores.hasFullSlate AS hasFullSlate, stores.lat AS latitude, stores.lng AS longitude');
  	$qb->from('AcmeDataBundle:Stores', 'stores');
    if(!strlen($pipeline)) {
      $qb->where('stores.locationStatus != :status');
      $qb->setParameter('status', $status);
    }
    $qb->andWhere('stores.lat != \'\'');
    $qb->andWhere('stores.lng != \'\'');
    if(strlen($featured)) {
      $qb->andWhere('stores.locationStatus = :open');
      $qb->setParameter('open', StoresStatus::OPEN);
      $qb->andWhere('stores.openDate >= :customDate');
      $qb->setParameter('customDate', date('Y-m-d', strtotime('-' . UtilsConstants::DAYS . ' days')));
      /*$qb->andWhere('stores.isFeatured = :featured');
      $qb->setParameter('featured', $featured);*/
    }
    if(strlen($pipeline)) {
      $qb->andWhere('stores.locationStatus = :pipeline');
      $qb->setParameter('pipeline', StoresStatus::PIPELINE);
      $qb->andWhere('stores.streetAddress1 != \'\'');
    }
    if(strlen($state)) {
      $qb->andWhere('stores.locationState = :state');
      $qb->setParameter('state', $state);
    }

    if(strlen($featured))
      $qb->orderBy('stores.openDate', 'DESC');
      //$qb->orderBy('stores.orderFeaturedIdx', 'ASC');
  	else
      $qb->orderBy($sortField, $sortType);

    $qb->setMaxResults($noRecords);
    $qb->setFirstResult($page * $noRecords);

    return $qb->getQuery()->getArrayResult();
	}

  public function getStore($id) {

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('stores');
    $qb->from('AcmeDataBundle:Stores', 'stores');
    $qb->where('stores.storeId = :id');
    $qb->setParameter('id', $id);

    return $qb->getQuery()->getArrayResult();
  }

  public function searchStores($latitude, $longitude, $limit, $metroId, $veterans = 0) {

    //first-cut bounding box (in degrees)
    $maxLat = $latitude + rad2deg(UtilsConstants::RADIUS / UtilsConstants::EARTHRADIUS);
    $minLat = $latitude - rad2deg(UtilsConstants::RADIUS / UtilsConstants::EARTHRADIUS);

    //compensate for degrees longitude getting smaller with increasing latitude
    $maxLon = $longitude + rad2deg(UtilsConstants::RADIUS / UtilsConstants::EARTHRADIUS / cos(deg2rad($latitude)));
    $minLon = $longitude - rad2deg(UtilsConstants::RADIUS / UtilsConstants::EARTHRADIUS / cos(deg2rad($latitude)));

    $conn = $this->getEntityManager()->getConnection(); //create a connection with your DB

    if($metroId) {
      $sql = "SELECT stores.id AS id, stores.storeId AS storeId, stores.streetAddress1 AS streetAddress1, stores.streetAddress2 AS streetAddress2, stores.locationCity AS locationCity, stores.locationState AS locationState, stores.locationPostalCode AS locationPostalCode, stores.hasFullSlate AS hasFullSlate, stores.starRating AS starRating, stores.phone AS phone, stores.rawPhone AS rawPhone, stores.semCamPhone AS semCamPhone, stores.rawSemCamPhone AS rawSemCamPhone, stores.lat AS latitude, stores.lng AS longitude, stores.hoursWeekdayOpen AS hoursWeekdayOpen, stores.hoursWeekdayClose AS hoursWeekdayClose, stores.hoursSaturdayOpen AS hoursSaturdayOpen, stores.hoursSaturdayClose AS hoursSaturdayClose, stores.hoursSundayOpen AS hoursSundayOpen, stores.hoursSundayClose AS hoursSundayClose, stores.locationDirections AS locationDirections, acos(sin(radians(" . $latitude . ")) * sin(radians(stores.lat)) + cos(radians(" . $latitude . ")) * cos(radians(stores.lat)) * cos(radians(stores.lng) - radians(" . $longitude . "))) * " . UtilsConstants::EARTHRADIUS . " AS distance FROM (
              SELECT id, storeId, streetAddress1, streetAddress2, locationCity, locationState, locationPostalCode, hasFullSlate, starRating, phone, rawPhone, semCamPhone, rawSemCamPhone, lat, lng, hoursWeekdayOpen, hoursWeekdayClose, hoursSaturdayOpen, hoursSaturdayClose, hoursSundayOpen, hoursSundayClose, locationDirections
              FROM stores
              WHERE dma_id = '" . $metroId . "' AND locationStatus = '" . StoresStatus::OPEN . "'
          ) AS stores
          ORDER BY distance
          LIMIT 0, " . $limit; //your SQL Query
    }
    else {
      if($veterans) {
        $sql = "SELECT stores.id AS id, stores.storeId AS storeId, stores.streetAddress1 AS streetAddress1, stores.streetAddress2 AS streetAddress2, stores.locationCity AS locationCity, stores.locationState AS locationState, stores.locationPostalCode AS locationPostalCode, stores.hasFullSlate AS hasFullSlate, stores.starRating AS starRating, stores.phone AS phone, stores.rawPhone AS rawPhone, stores.semCamPhone AS semCamPhone, stores.rawSemCamPhone AS rawSemCamPhone, stores.lat AS latitude, stores.lng AS longitude, stores.hoursWeekdayOpen AS hoursWeekdayOpen, stores.hoursWeekdayClose AS hoursWeekdayClose, stores.hoursSaturdayOpen AS hoursSaturdayOpen, stores.hoursSaturdayClose AS hoursSaturdayClose, stores.hoursSundayOpen AS hoursSundayOpen, stores.hoursSundayClose AS hoursSundayClose, stores.locationDirections AS locationDirections, acos(sin(radians(" . $latitude . ")) * sin(radians(stores.lat)) + cos(radians(" . $latitude . ")) * cos(radians(stores.lat)) * cos(radians(stores.lng) - radians(" . $longitude . "))) * " . UtilsConstants::EARTHRADIUS . " AS distance FROM (
                SELECT id, storeId, streetAddress1, streetAddress2, locationCity, locationState, locationPostalCode, hasFullSlate, starRating, phone, rawPhone, semCamPhone, rawSemCamPhone, lat, lng, hoursWeekdayOpen, hoursWeekdayClose, hoursSaturdayOpen, hoursSaturdayClose, hoursSundayOpen, hoursSundayClose, locationDirections
                FROM stores
                WHERE lat BETWEEN " . $minLat . " AND " . $maxLat . " AND lng BETWEEN " . $minLon ." AND " . $maxLon . " AND locationStatus = '" . StoresStatus::OPEN . "' AND hasVeterans = 1
            ) AS stores
            HAVING distance <= " . UtilsConstants::RADIUS . "
            ORDER BY distance
            LIMIT 0, " . $limit; //your SQL Query
      }
      else {
        $sql = "SELECT stores.id AS id, stores.storeId AS storeId, stores.streetAddress1 AS streetAddress1, stores.streetAddress2 AS streetAddress2, stores.locationCity AS locationCity, stores.locationState AS locationState, stores.locationPostalCode AS locationPostalCode, stores.hasFullSlate AS hasFullSlate, stores.starRating AS starRating, stores.phone AS phone, stores.rawPhone AS rawPhone, stores.semCamPhone AS semCamPhone, stores.rawSemCamPhone AS rawSemCamPhone, stores.lat AS latitude, stores.lng AS longitude, stores.hoursWeekdayOpen AS hoursWeekdayOpen, stores.hoursWeekdayClose AS hoursWeekdayClose, stores.hoursSaturdayOpen AS hoursSaturdayOpen, stores.hoursSaturdayClose AS hoursSaturdayClose, stores.hoursSundayOpen AS hoursSundayOpen, stores.hoursSundayClose AS hoursSundayClose, stores.locationDirections AS locationDirections, acos(sin(radians(" . $latitude . ")) * sin(radians(stores.lat)) + cos(radians(" . $latitude . ")) * cos(radians(stores.lat)) * cos(radians(stores.lng) - radians(" . $longitude . "))) * " . UtilsConstants::EARTHRADIUS . " AS distance FROM (
                SELECT id, storeId, streetAddress1, streetAddress2, locationCity, locationState, locationPostalCode, hasFullSlate, starRating, phone, rawPhone, semCamPhone, rawSemCamPhone, lat, lng, hoursWeekdayOpen, hoursWeekdayClose, hoursSaturdayOpen, hoursSaturdayClose, hoursSundayOpen, hoursSundayClose, locationDirections
                FROM stores
                WHERE lat BETWEEN " . $minLat . " AND " . $maxLat . " AND lng BETWEEN " . $minLon ." AND " . $maxLon . " AND locationStatus = '" . StoresStatus::OPEN . "'
            ) AS stores
            HAVING distance <= " . UtilsConstants::RADIUS . "
            ORDER BY distance
            LIMIT 0, " . $limit; //your SQL Query
      }
    }

    $stmt = $conn->prepare($sql); //prepare your sql
    $stmt->execute(); //execute your sql
    $result = $stmt->fetchAll(); //fetch your result

    return $result;
  }

  public function getStates($isFeatured = '', $isPipeline = '') {

    if($isFeatured == 0 || $isFeatured == 1)
      $featured = $isFeatured;
    else
      $featured = '';

    if($isPipeline == 0 || $isPipeline == 1)
      $pipeline = $isPipeline;
    else
      $pipeline = '';

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('stores.locationState AS stateAbbreviation');
    $qb->from('AcmeDataBundle:Stores', 'stores');
    $qb->where('stores.locationState != \'\'');

    if(!strlen($pipeline)) {
      $qb->andWhere('stores.locationStatus = :status');
      $qb->setParameter('status', StoresStatus::OPEN);
    }

    if(strlen($featured)) {
      $qb->andWhere('stores.isFeatured = :featured');
      $qb->setParameter('featured', $featured);
    }
    if(strlen($pipeline)) {
      $qb->andWhere('stores.locationStatus = :pipeline');
      $qb->setParameter('pipeline', StoresStatus::PIPELINE);
      $qb->andWhere('stores.streetAddress1 != \'\'');
      $qb->andWhere('stores.lat != \'\'');
      $qb->andWhere('stores.lng != \'\'');
    }

    $qb->groupBy('stateAbbreviation');
    $qb->orderBy('stateAbbreviation');

    return $qb->getQuery()->getArrayResult();
  }

  public function getCities($state) {

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('stores.locationCity AS city');
    $qb->from('AcmeDataBundle:Stores', 'stores');
    $qb->where('stores.locationStatus = :status');
    $qb->andWhere('stores.locationState = :state');
    $qb->setParameter('status', StoresStatus::OPEN);
    $qb->setParameter('state', $state);
    $qb->groupBy('city');
    $qb->orderBy('city');

    return $qb->getQuery()->getArrayResult();
  }

  public function getMetros($state = '') {

    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('dma.id AS id, dma.title AS metro, dma.state AS state, dma.dmaSlug AS metroSlug');
    $qb->from('AcmeDataBundle:Dma', 'dma');
    if($state) {
      $qb->where('dma.state = :state');
      $qb->setParameter('state', $state);
    }
    $qb->orderBy('id');

    return $qb->getQuery()->getArrayResult();
  }

  public function findInUSCities($city, $state, $zip = 0) {
    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('usCities.lat AS lat, usCities.lng AS lng');
    $qb->from('AcmeDataBundle:UsCities', 'usCities');
    if($zip) {
      $qb->where('usCities.zip = :zip');
      $qb->setParameter('zip', $zip);
    }
    else {
      if($city & $state) {
        $qb->where('usCities.city = :city');
        $qb->andWhere('usCities.state = :state');
        $qb->setParameter('city', $city);
        $qb->setParameter('state', $state);
      }
      else {
        $qb->where('usCities.city = :city');
        $qb->setParameter('city', $city);
      }
    }
    $qb->orderBy('usCities.id');

    return $qb->getQuery()->getArrayResult();
  }

  public function getCityInfo($key) {
    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('stores.locationCity AS locationCity, stores.locationState AS locationState');
    $qb->from('AcmeDataBundle:Stores', 'stores');
    $qb->where('stores.locationCity LIKE :key');
    //$qb->andWhere('stores.locationStatus = :status');
    $qb->setParameter('key', '%' . $key . '%');
    //$qb->setParameter('status', StoresStatus::OPEN);
    $qb->orderBy('stores.id');

    return $qb->getQuery()->getArrayResult();
  }

  public function setStoresOptOut($stores) {
    $conn = $this->getEntityManager()->getConnection(); //create a connection with your DB

    $implode = implode(",", $stores);

    $sql = "UPDATE stores SET optin = 0 WHERE storeId NOT IN(" . $implode . ")"; //your SQL Query

    $stmt = $conn->prepare($sql); //prepare your sql
    $stmt->execute(); //execute your sql
  }

}
